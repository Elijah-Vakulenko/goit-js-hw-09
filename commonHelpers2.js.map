{"version":3,"file":"commonHelpers2.js","sources":["../src/js/2-form.js"],"sourcesContent":["// Оголоси поза будь-якими функціями об’єкт formData з полями email та message, які спочатку мають порожні рядки як значення: { email: \"\", message: \"\" }.\n// Використовуй метод делегування для відстеження змін у формі через подію input. Зберігай актуальні дані з полів email та message у formData та записуй цей об’єкт у локальне сховище. Використовуй ключ \"feedback-form-state\" для зберігання даних у сховищі.\n// При завантаженні сторінки перевір, чи є дані у локальному сховищі. Якщо так, використовуй їх для заповнення форми та об'єкта formData. Якщо ні, залиш поля форми порожніми.\n// Перед відправленням форми переконайся, що обидва поля форми заповнені. Якщо будь-яке з полів (властивостей об’єкта formData) порожнє, показуй сповіщення з текстом «Fill please all fields». Якщо всі поля заповнені, виведи у консоль об’єкт formData з актуальними значеннями, очисти локальне сховище, об’єкт formData і поля форми.\n\n// На живій сторінці відображається форма з двома елементами форми і кнопкою типу submit\n// Форма стилізована згідно з макетом\n// На формі прослуховуються події input і submit\n// При введенні даних у будь-який елемент форми вони записуються у локальне сховище під ключем \"feedback-form-state\", збережені дані не містять пробіли по краях\n// Введення даних в одне поле форми не видаляє дані в сховищі для іншого\n// При оновленні сторінки дані з локального сховища підставляються в елементи форми, у полях форми відсутні undefined\n// При сабміті форми є перевірка, щоб обидва елементи форми були заповнені\n// Під час сабміту форми, якщо обидва елементи форми заповнені, виводиться у консоль об'єкт з полями email, message та їхніми поточними значеннями, а також очищаються сховище і поля форми\n// Якщо після сабміту форми ввести в будь-який елемент форми дані, то в локальному сховищі не з’являються дані від попереднього сабміта\n\n\nconst formData = {\n    email: \"\",\n    message: \"\", \n}\n\n\nconst feedbackForm = document.querySelector('.feedback-form');\n\nconst inputs = document.querySelector(\"input\");\n\nconst btn = document.querySelector(\"button\");\n\nfeedbackForm.addEventListener(\"submit\", handleSubmit);\n\n\nfunction handleSubmit(event) {\n    \n    event.preventDefault();\n\n    // const loginInfo = {};\n    // loginInfo.email = elements.email.value;\n    // loginInfo.message = elements.message.value;\n    // console.log(loginInfo);\n\n    feedbackForm.reset();\n}"],"names":["feedbackForm","handleSubmit","event"],"mappings":"wFAsBA,MAAMA,EAAe,SAAS,cAAc,gBAAgB,EAE7C,SAAS,cAAc,OAAO,EAEjC,SAAS,cAAc,QAAQ,EAE3CA,EAAa,iBAAiB,SAAUC,CAAY,EAGpD,SAASA,EAAaC,EAAO,CAEzBA,EAAM,eAAc,EAOpBF,EAAa,MAAK,CACtB"}